server:
  port: ${POST_PORT:8111}
  servlet:
    context-path: ${POST_CONTEXT_PATH:/post}

spring:
  application:
    name: ${POST_APP_NAME:POST}
  datasource:
    url: jdbc:mysql://${POST_DB_HOST:localhost}:${POST_DB_PORT:3306}/${POST_DB_NAME:social_post}
    username: ${POST_DB_USERNAME}
    password: ${POST_DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        default_batch_fetch_size: 16
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        "[spring.json.add.type.headers]": false
    properties:
      enable.idempotence: true
      acks: all
      retries: 5
      request.timeout.ms: 20000
      delivery.timeout.ms: 30000

jwt:
  signerKey: ${POST_JWT_SIGNER_KEY:1TjXchw5FloESb63Kc+DFhTARvpWL4jUGCwfGWxuG5SIf/1y/LgJxHnMqaF6A/ij}

kafka:
  topic: ${POST_KAFKA_TOPIC:Post_Topic}

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL}
    register-with-eureka: true
    fetch-registry: true
    enabled: true
  instance:
    hostname: localhost

logging:
  level:
    org.springframework.web.socket: DEBUG
    org.springframework.messaging: DEBUG


cloudinary:
  cloud-name: ${CLOUDINARY_CLOUD_NAME}
  api-key: ${CLOUDINARY_API_KEY}
  api-secret: ${CLOUDINARY_API_SECRET}
  secure: true